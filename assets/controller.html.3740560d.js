import{_ as i,r as a,o as c,c as p,b as o,d as s,w as l,e,a as r}from"./app.6f19168f.js";const d={},u=o("h1",{id:"controller",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#controller","aria-hidden":"true"},"#"),e(" [Controller]")],-1),h=o("p",null,"Allows for control over the generated MVC Controllers.",-1),D=o("p",null,"Currently only controls over the API controllers are present, but additional properties may be added in the future.",-1),m=e("This attribute may be placed on any type from which an API controller is generated, including "),_=e("Entity Models"),y=e(", "),f=e("Custom DTOs"),v=e(", and "),g=e("Services"),b=e("."),C=r(`<h2 id="example-usage" tabindex="-1"><a class="header-anchor" href="#example-usage" aria-hidden="true">#</a> Example Usage</h2><div class="language-c# ext-c# line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Controller</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ApiRouted</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ApiControllerSuffix</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;Gen&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ApiActionsProtected</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">PersonId</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    ...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2>`,3),A=r("<p>Determines whether or not a <code>[Route]</code> annotation will be placed on the generated API controller. Set to <code>false</code> to prevent emission of the <code>[Route]</code> attribute.</p><p>Use cases include:</p><ul><li>Defining your routes through IRouteBuilder in Startup.cs instead</li><li>Preventing API controllers from being exposed by default.</li><li>Routing to your own custom controller that inherits from the generated API controller in order to implement more granular or complex authorization logic.</li></ul>",3),P=o("p",null,"If set, will determine the name of the generated API controller.",-1),x=o("p",null,[e("Takes precedence over the value of "),o("code",null,"ApiControllerSuffix"),e(".")],-1),I=o("p",null,"If set, will be appended to the default name of the API controller generated for this model.",-1),w=o("p",null,[e("Will be overridden by the value of "),o("code",null,"ApiControllerName"),e(" if it is set.")],-1),E=r('<p>If true, actions on the generated API controller will have an access modifier of <code>protected</code> instead of <code>public</code>.</p><p>In order to consume the generated API controller, you must inherit from the generated controller and override each desired generated action method via hiding (i.e. use <code>public new ...</code>, not <code>public override ...</code>).</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>If you inherit from the generated API controllers and override their methods without setting <code>ApiActionsProtected = true</code>, all non-overridden actions from the generated controller will still be exposed as normal.</p></div>',3);function R(k,N){const t=a("RouterLink"),n=a("Prop");return c(),p("div",null,[u,h,D,o("p",null,[m,s(t,{to:"/modeling/model-types/entities.html"},{default:l(()=>[_]),_:1}),y,s(t,{to:"/modeling/model-types/dtos.html"},{default:l(()=>[f]),_:1}),v,s(t,{to:"/modeling/model-types/services.html"},{default:l(()=>[g]),_:1}),b]),C,s(n,{def:"public bool ApiRouted { get; set; } = true;"}),A,s(n,{def:"public string ApiControllerName { get; set; } = null;"}),P,x,s(n,{def:"public string ApiControllerSuffix { get; set; } = null;"}),I,w,s(n,{def:"public bool ApiActionsProtected { get; set; } = false;"}),E])}var B=i(d,[["render",R],["__file","controller.html.vue"]]);export{B as default};
